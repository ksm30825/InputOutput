package com.kh.io.part01_byteStream.run;

import com.kh.io.part01_byteStream.model.dao.TestByteStream;

public class Run {
	public static void main(String[] args) {
		TestByteStream tbs = new TestByteStream();
		//tbs.fileOpen();
		//new-file-sample.dat을하면 에러도 발생 안함
		
		//tbs.fileOpen2();
		tbs.fileSave();
	}
}
package com.kh.io.part01_byteStream.model.dao;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

//파일에 바이트단위로 읽고 쓰는 것
public class TestByteStream {
	public void fileOpen() {
		//파일로부터 byte단위로 데이터를 읽어올 수 있는 스트림
		FileInputStream fin = null;
		//바이트 단위로 읽기 때문에 한글은 알수 없는 문자가 나온다.
		//영문자나 파일 사진을 읽을때 적합하다.
		
		try {
			fin = new FileInputStream("sample.dat");
			/*
			//파일의 길이는 long형으로 리턴하기 때문에 int로 형변환을 해야 한다.
			int fileSize = (int) new File("sample.dat").length();
			
			System.out.println(fileSize);
			//sample.dat 파일에 abcde 를 입력시 5가 출력
			
			byte[] bar = new byte[fileSize];
			
			//파일을 배열로 읽어온다.
			fin.read(bar);
			
			for(int i=0 ; i<bar.length ; i++) {
				//sampl.dat 파일에 있는 abcde를 유니코드로 출력
				System.out.print(bar[i]+" ");
				
				//char로 형변환
				System.out.print((char)bar[i]+" ");
			}*/
			
			//바이트 사용안하고 한문자씩 끊어서 사용하는 방법
			int value;
			while((value = fin.read())!=-1) {
				
				System.out.print((char)value+" ");
			}
		} catch (FileNotFoundException e) {
			
			e.printStackTrace();
		} catch (IOException e) {
			
			e.printStackTrace();
		} finally {
			try {
				//close 자체도 IOException이 throw되기 때문에 try catch를 해주어야 한다.
				//stream이라는 것 자체가 통로 자체가 아닌 바이트 단위로 빠르게 이동하기 때문에 통로처럼 보여서 stream이라고 하는 것이다.
				//통로가 많아지면 데이터들이 꼬인다.
				//썼던 스트림은 반드시 close()를 사용해서 닫아줘야 한다(썼던 자원 반납)
				fin.close();
			} catch (IOException e) {
				
				e.printStackTrace();
			}
		}
	}
	public void fileOpen2() {
		//try with resource
		//close()를 사용안하기 위한 구문
		//자동으로 닫아줌
		try(FileInputStream fin = new FileInputStream("sample.dat")){
			
			int fileSize = (int)new File("sample.dat").length();
			
			byte[] bar = new byte[fileSize];
			
			fin.read(bar);
			
			for(int i=0 ; i<bar.length ; i++) {
				System.out.print(bar[i]+" ");
			}
		}catch(FileNotFoundException e) {
			
		}catch(IOException e) {
			
		}
	}
	public void fileSave() {
		FileOutputStream fout = null;
		//finally에서 close 하기 위해 null값으로 초기화 하는것
		
		try {
			//OutputStream은
			//대상 파일이 존재하지 않으면 자동으로 파일을 생성해준다.
			
			fout = new FileOutputStream("sample.dat");
			//기존 파일을 지우고 실행한 뒤 refresh해주면 파일이 생성되어있다.
			
			fout.write(97);
			//add catch
			//a라는 값을 sample.dat에 저장
			
			byte[] bar= {98, 99, 100, 101, 102, 10};
			fout.write(bar);
			fout.write(bar, 1, 3);
			//99 ,100, 101을 저장
			
			
			
			
		} catch (FileNotFoundException e) {
			
			e.printStackTrace();
		} catch (IOException e) {
			
			e.printStackTrace();
		} finally {
			try {
				fout.close();
			} catch (IOException e) {
				
				e.printStackTrace();
			}
		}
		
	}
}
